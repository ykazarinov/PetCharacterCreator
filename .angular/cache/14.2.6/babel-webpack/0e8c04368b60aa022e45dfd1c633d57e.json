{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/global-sevice.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/dialog\";\n\nconst _c0 = function (a0) {\n  return {\n    \"backgroundColor\": a0\n  };\n};\n\nexport let ColorComponent = /*#__PURE__*/(() => {\n  class ColorComponent {\n    constructor(globalService) {\n      this.globalService = globalService;\n    }\n\n    ngOnInit() {}\n\n    takeColor() {\n      if (this.globalService.choose_color_type === 1) {\n        // если выбирается цвет для тела\n        // для текущих деталей\n        for (let i in this.globalService.myAnimal.my_parts) {\n          if (this.globalService.myAnimal.my_parts[i].have_body_color === 1) {\n            this.globalService.myAnimal.my_parts[i].bg_color_default = this.color.rgb_color;\n          }\n        } // для всех деталей в наборе\n\n\n        for (let j in this.globalService.parts) {\n          if (this.globalService.parts[j].have_body_color === 1) {\n            this.globalService.parts[j].bg_color_default = this.color.rgb_color;\n          }\n        }\n      } else if (this.globalService.choose_color_type === 2) {\n        // если выбирается основной цвет дополнительной детали\n        for (let i in this.globalService.myAnimal.my_parts) {\n          if (this.globalService.myAnimal.my_parts[i].categ_id === this.globalService.categ_id_for_color) {\n            if (this.globalService.myAnimal.my_parts[i].have_body_color === 0 || this.globalService.myAnimal.my_parts[i].have_body_color === null) {\n              this.globalService.myAnimal.my_parts[i].bg_color_default = this.color.rgb_color;\n            }\n          }\n        }\n\n        for (let j in this.globalService.parts) {\n          if (this.globalService.parts[j].categ_id === this.globalService.categ_id_for_color) {\n            if (this.globalService.parts[j].have_body_color === 0 || this.globalService.parts[j].have_body_color === null) {\n              this.globalService.parts[j].bg_color_default = this.color.rgb_color;\n            }\n          }\n        }\n      } else if (this.globalService.choose_color_type === 3) {\n        // если выбирается спец цвет дополнительной детали\n        for (let i in this.globalService.myAnimal.my_parts) {\n          if (this.globalService.myAnimal.my_parts[i].categ_id === this.globalService.categ_id_for_color) {\n            // if(this.globalService.myAnimal.my_parts[i].have_body_color === 0){\n            this.globalService.myAnimal.my_parts[i].spec_color_default = this.color.rgb_color; // }\n          }\n        }\n\n        for (let j in this.globalService.parts) {\n          if (this.globalService.parts[j].categ_id === this.globalService.categ_id_for_color) {\n            // if(this.globalService.parts[j].have_body_color === 0){\n            this.globalService.parts[j].spec_color_default = this.color.rgb_color; // }\n          }\n        }\n      }\n    }\n\n  }\n\n  ColorComponent.ɵfac = function ColorComponent_Factory(t) {\n    return new (t || ColorComponent)(i0.ɵɵdirectiveInject(i1.GlobalSeviceService));\n  };\n\n  ColorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ColorComponent,\n    selectors: [[\"app-color\"]],\n    inputs: {\n      color: \"color\"\n    },\n    decls: 2,\n    vars: 3,\n    consts: [[1, \"color_cont\"], [1, \"color\", 3, \"mat-dialog-close\", \"ngStyle\", \"click\"]],\n    template: function ColorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵlistener(\"click\", function ColorComponent_Template_div_click_1_listener() {\n          return ctx.takeColor();\n        });\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(1, _c0, ctx.color.rgb_color));\n      }\n    },\n    dependencies: [i2.NgStyle, i3.MatDialogClose],\n    styles: [\".color_cont[_ngcontent-%COMP%]{padding:.3rem}.color_cont[_ngcontent-%COMP%]   .color[_ngcontent-%COMP%]{border-radius:50%;width:3rem;height:3rem}\"]\n  });\n  return ColorComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}