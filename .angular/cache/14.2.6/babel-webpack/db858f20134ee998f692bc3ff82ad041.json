{"ast":null,"code":"import { NgxIndexedDBService } from 'ngx-indexed-db';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-indexed-db\";\nimport * as i2 from \"@angular/common/http\";\nexport let GlobalSeviceService = /*#__PURE__*/(() => {\n  class GlobalSeviceService {\n    constructor(dbService, http) {\n      this.dbService = dbService;\n      this.http = http;\n      this.server_url = 'http://localhost:8000/';\n      this.server_media_url = 'storage/';\n      this.headerisVisible = false;\n      this.app_title_1 = \"Pet\\'s\";\n      this.app_title_2 = 'character';\n      this.app_title_3 = 'creator';\n      this.begin_bot_text = 'play now!';\n      this.languages = [];\n      this.animals = [];\n      this.genders = [];\n      this.myAnimal = {\n        animal_id: 0,\n        gender_id: 0,\n        my_parts: [] = []\n      }; // переменные хранящие данные для перевода на разные языки\n\n      this.menu_items = [];\n      this.pages = [];\n      this.wins = [];\n      this.buttons = [];\n      this.inputs = []; //===========\n\n      this.soc_networks = [];\n      this.categories = [];\n      this.parts = [];\n      this.color_icons = [];\n      this.colors_hues = [];\n      this.colorHue1 = [];\n      this.colors_luminosity = [];\n      this.colors = [];\n      this.non_changeable_parts_svg = [];\n      this.main_color_btn_active = false; // проверка активности кнопки выбора основного цвета для второстепенных деталей\n\n      this.spec_color_btn_active = false; // проверка активности кнопки выбора спец цвета для второстепенных деталей\n      // page_url: string;\n      // stream$ = new Observable <Page>(observer => {\n      //   this.page_url =  this.router.url.slice(1);\n      //   console.log(this.page_url); \n      //   for(let i in this.languages){\n      //     if(this.languages[i].current === true){\n      //       setTimeout(() => {\n      //         observer.next(\n      //           this.languages[i].pages.find(p => p.slug === this.page_url)\n      //           ); // happens asynchronously\n      //         observer.complete();\n      //         // subscriber.complete();\n      //         return {unsubscribe() {}}\n      //       }, 0);\n      //     }\n      //   }\n      // });\n\n      this.petBackgrounds = []; // считывание данных из базы на стороне клиента\n\n      this.allMyPets = [];\n      this.delResult = false;\n    }\n\n    loadCategoriesAndParts(anim_id, gender_id) {\n      return this.http.get(this.server_url + 'constructor_page?anim_id=' + anim_id + \"&gender_id=\" + gender_id);\n    } // установить активную категорию\n\n\n    setActivCat() {\n      for (let i in this.categories) {\n        if (this.categories[i].css_categ_active === true) {\n          for (let j in this.parts) {\n            if (this.categories[i].id === this.parts[j].part_categ_id) {\n              this.actual_categ_id = this.categories[i].id;\n            }\n          }\n        }\n      } // console.log(\"this.actual_categ_id \" + this.actual_categ_id);\n\n    } // выставление активности для кнопок цвета для деталей\n\n\n    verifActivePart() {\n      this.main_color_btn_active = false;\n      this.spec_color_btn_active = false;\n\n      for (let i in this.categories) {\n        if (this.categories[i].css_categ_active === true) {\n          for (let j in this.parts) {\n            if (this.categories[i].id === this.parts[j].part_categ_id) {\n              this.actual_categ_id = this.categories[i].id;\n\n              if (this.parts[j].css_part_active === true) {\n                if (this.parts[j].layer_1_code_bg === null || this.parts[j].have_body_color === 1) {\n                  this.main_color_btn_active = false;\n                } else {\n                  this.main_color_btn_active = true;\n                }\n\n                if (this.parts[j].layer_3_code_speccol === null) {\n                  this.spec_color_btn_active = false;\n                } else {\n                  this.spec_color_btn_active = true;\n                }\n              }\n            }\n          }\n        }\n      }\n    } // по полученному url находим среди страниц нужную\n\n\n    getByUrl(url) {\n      for (let i in this.languages) {\n        if (this.languages[i].current === true) {\n          return this.languages[i].pages.find(p => p.slug === url);\n        }\n      }\n    }\n\n    getTranslate(locale) {\n      return this.http.get(this.server_url + 'get_lang?locale=' + locale);\n    }\n\n    loadPetBackgrounds() {\n      return this.http.get(this.server_url + 'get_petBackgrounds');\n    } // пробую добавить запись в локальную базу данных\n\n\n    addMan() {\n      this.dbService.add('mypet', {\n        animal_id: this.myAnimal.animal_id,\n        choosed_bg_url: this.myAnimal.choosed_bg_url,\n        gender_id: this.myAnimal.gender_id,\n        name: this.myAnimal.name,\n        my_parts: this.myAnimal.my_parts\n      }).subscribe(key => {\n        console.log('key: ', key);\n      });\n      this.dbService.getAll('mypet').subscribe(peoples => {\n        console.log(peoples);\n      });\n    }\n\n    getAllMyPets() {\n      this.dbService.getAll('mypet').subscribe(peoples => {\n        this.allMyPets = peoples.reverse();\n      });\n    }\n\n    nextPageBtnText(page_url) {\n      for (let i in this.languages) {\n        if (this.languages[i].current === true) {\n          this.current_lang = this.languages[i];\n\n          for (let j in this.current_lang.buttons) {\n            if (this.current_lang.buttons[j].page_url === page_url) {\n              this.currentPageButton = this.current_lang.buttons[j];\n            }\n          }\n        }\n      }\n\n      return this.currentPageButton;\n    } // del_pet_id: number;\n\n\n    dialogResult(result) {\n      this.delResult = false;\n\n      if (result === true) {\n        //return true;\n        this.delResult = true;\n        console.log('this.delResult:', this.delResult);\n      }\n    }\n\n    deletePet() {// if (this.delResult === true){\n      //   this.dbService.deleteByKey('mypet', del_pet_id).subscribe((status) => {\n      //   console.log('Deleted?:', status);\n      // });\n      //  console.log('del');\n      // }\n    }\n\n  }\n\n  GlobalSeviceService.ɵfac = function GlobalSeviceService_Factory(t) {\n    return new (t || GlobalSeviceService)(i0.ɵɵinject(i1.NgxIndexedDBService), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  GlobalSeviceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GlobalSeviceService,\n    factory: GlobalSeviceService.ɵfac,\n    providedIn: 'root'\n  });\n  return GlobalSeviceService;\n})();","map":null,"metadata":{},"sourceType":"module"}